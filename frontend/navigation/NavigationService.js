import { createNavigationContainerRef } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Cr√©er une r√©f√©rence de navigation globale
export const navigationRef = createNavigationContainerRef();

// Fonction utilitaire pour naviguer depuis n'importe o√π
export function navigate(name, params) {
  console.log("[NAVIGATION_SERVICE] Tentative de navigation vers:", name, params);
  if (navigationRef.isReady()) {
    console.log("[NAVIGATION_SERVICE] Navigation ex√©cut√©e");
    navigationRef.navigate(name, params);
  } else {
    console.log("[NAVIGATION_SERVICE] Navigation mise en attente - NavigationContainer pas pr√™t");
    // Stocker la navigation pour l'ex√©cuter plus tard
    AsyncStorage.setItem(
      'PENDING_NAVIGATION',
      JSON.stringify({ name, params, timestamp: Date.now() })
    ).catch(err => console.error('[NAVIGATION_SERVICE] Erreur de stockage de navigation:', err));
  }
}

// Navigation sp√©cifique vers une conversation - CORRIG√âE SELON VOTRE STRUCTURE
export function navigateToConversation(conversationId) {
  console.log("[NAVIGATION_SERVICE] Navigation vers conversation:", conversationId);
  
  if (navigationRef.isReady()) {
    try {
      // CORRECTION: Navigation selon votre vraie structure de navigation
      // StackNavigator -> MainApp (DrawerNavigator) -> Tabs (TabNavigator) -> ChatTab (ConversationStackNavigator) -> Chat (ChatScreen)
      console.log("[NAVIGATION_SERVICE] Tentative navigation structure compl√®te");
      
      navigationRef.navigate('MainApp', {
        screen: 'Tabs', // DrawerNavigator contient TabNavigator sous le nom "Tabs"
        params: {
          screen: 'ChatTab', // TabNavigator contient ConversationStackNavigator sous le nom "ChatTab"
          params: {
            screen: 'Chat', // ConversationStackNavigator contient ChatScreen sous le nom "Chat"
            params: { conversationId },
          },
        },
      });
      
      console.log("[NAVIGATION_SERVICE] Navigation r√©ussie (structure compl√®te)");
    } catch (error) {
      console.log("[NAVIGATION_SERVICE] √âchec m√©thode principale, tentative fallback:", error);
      try {
        // M√©thode 2: Navigation directe vers l'onglet si la structure compl√®te √©choue
        navigationRef.navigate('ChatTab', {
          screen: 'Chat',
          params: { conversationId },
        });
        console.log("[NAVIGATION_SERVICE] Navigation r√©ussie (fallback ChatTab)");
      } catch (fallbackError) {
        console.log("[NAVIGATION_SERVICE] √âchec fallback ChatTab, tentative Chat direct:", fallbackError);
        try {
          // M√©thode 3: Navigation tr√®s directe
          navigationRef.navigate('Chat', { conversationId });
          console.log("[NAVIGATION_SERVICE] Navigation r√©ussie (Chat direct)");
        } catch (lastError) {
          console.error("[NAVIGATION_SERVICE] Toutes les m√©thodes ont √©chou√©:", lastError);
          
          // Debug: Afficher l'√©tat de navigation actuel
          try {
            const state = navigationRef.getState?.();
            console.log("[NAVIGATION_SERVICE] üîç √âtat de navigation actuel:", JSON.stringify(state, null, 2));
          } catch (debugError) {
            console.log("[NAVIGATION_SERVICE] üîç Impossible d'obtenir l'√©tat de navigation");
          }
        }
      }
    }
  } else {
    console.log("[NAVIGATION_SERVICE] NavigationContainer pas pr√™t, stockage pour plus tard");
    AsyncStorage.setItem(
      'PENDING_NAVIGATION',
      JSON.stringify({ 
        type: 'conversation',
        conversationId, 
        timestamp: Date.now() 
      })
    ).catch(err => console.error('[NAVIGATION_SERVICE] Erreur de stockage:', err));
  }
}

// V√©rifier s'il y a des navigations en attente (appel√© depuis App.js)
export async function checkPendingNavigation() {
  if (!navigationRef.isReady()) {
    console.log("[NAVIGATION_SERVICE] NavigationContainer pas encore pr√™t");
    return;
  }
  
  try {
    const pendingNavStr = await AsyncStorage.getItem('PENDING_NAVIGATION');
    if (pendingNavStr) {
      const pendingNav = JSON.parse(pendingNavStr);
      
      // Ne traiter que les navigations r√©centes (moins de 2 minutes)
      if (Date.now() - pendingNav.timestamp < 120000) {
        console.log("[NAVIGATION_SERVICE] Ex√©cution d'une navigation en attente:", pendingNav);
        
        if (pendingNav.type === 'conversation' && pendingNav.conversationId) {
          navigateToConversation(pendingNav.conversationId);
        } else if (pendingNav.name && pendingNav.params) {
          navigate(pendingNav.name, pendingNav.params);
        }
      } else {
        console.log("[NAVIGATION_SERVICE] Navigation en attente trop ancienne, ignor√©e");
      }
      
      // Nettoyer
      await AsyncStorage.removeItem('PENDING_NAVIGATION');
    }
  } catch (error) {
    console.error("[NAVIGATION_SERVICE] Erreur de v√©rification des navigations en attente:", error);
  }
}

// Fonction utilitaire pour d√©boguer l'√©tat de navigation
export function debugNavigationState() {
  if (navigationRef.isReady()) {
    try {
      const state = navigationRef.getState();
      console.log("[NAVIGATION_SERVICE] üîç √âtat de navigation complet:", JSON.stringify(state, null, 2));
      return state;
    } catch (error) {
      console.error("[NAVIGATION_SERVICE] Erreur lors de la r√©cup√©ration de l'√©tat:", error);
      return null;
    }
  } else {
    console.log("[NAVIGATION_SERVICE] NavigationContainer pas pr√™t pour le debug");
    return null;
  }
}

// Fonction pour naviguer vers AddSecret (utile pour les retours Stripe)
export function navigateToAddSecret() {
  console.log("[NAVIGATION_SERVICE] Navigation vers AddSecret");
  
  if (navigationRef.isReady()) {
    try {
      navigationRef.navigate('MainApp', {
        screen: 'Tabs',
        params: {
          screen: 'AddSecret',
        },
      });
      console.log("[NAVIGATION_SERVICE] Navigation vers AddSecret r√©ussie");
    } catch (error) {
      console.error("[NAVIGATION_SERVICE] Erreur navigation vers AddSecret:", error);
      // Fallback
      try {
        navigationRef.navigate('AddSecret');
      } catch (fallbackError) {
        console.error("[NAVIGATION_SERVICE] Fallback AddSecret √©chou√© aussi:", fallbackError);
      }
    }
  } else {
    AsyncStorage.setItem(
      'PENDING_NAVIGATION',
      JSON.stringify({ 
        name: 'AddSecret',
        params: {},
        timestamp: Date.now() 
      })
    ).catch(err => console.error('[NAVIGATION_SERVICE] Erreur de stockage AddSecret:', err));
  }
}