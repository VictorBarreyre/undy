// NotificationDebugHelper.js
// Version am√©lior√©e et synth√©tis√©e pour un debug efficace

import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { navigationRef } from '../../navigation/NavigationService';
import { getAxiosInstance } from '../../data/api/axiosInstance';

class NotificationDebugHelper {
  
  // === M√âTHODES PRINCIPALES ===
  
  /**
   * Diagnostic rapide complet
   * V√©rifie permissions, navigation et √©tat global
   */
  static async quickDiagnostic() {
    console.log('\nüèÉ === DIAGNOSTIC RAPIDE ===\n');
    
    const results = {
      permissions: false,
      navigation: false,
      pendingNav: false,
      token: null
    };
    
    // 1. Permissions
    try {
      const { status } = await Notifications.getPermissionsAsync();
      results.permissions = status === 'granted';
      console.log(`1Ô∏è‚É£ Permissions: ${results.permissions ? '‚úÖ Accord√©es' : '‚ùå Refus√©es'} (${status})`);
    } catch (error) {
      console.error('‚ùå Erreur permissions:', error.message);
    }
    
    // 2. Navigation
    try {
      results.navigation = navigationRef.isReady();
      console.log(`2Ô∏è‚É£ Navigation: ${results.navigation ? '‚úÖ Pr√™te' : '‚ùå Pas pr√™te'}`);
      
      if (results.navigation) {
        const state = navigationRef.getState();
        console.log('   üìç Route actuelle:', state?.routes[state.index]?.name || 'Inconnue');
      }
    } catch (error) {
      console.error('‚ùå Erreur navigation:', error.message);
    }
    
    // 3. Navigations en attente
    try {
      const keys = ['PENDING_CONVERSATION_NAV', 'EMERGENCY_NAVIGATION', 'PENDING_NAVIGATION'];
      let hasPending = false;
      
      for (const key of keys) {
        const value = await AsyncStorage.getItem(key);
        if (value) {
          hasPending = true;
          const data = JSON.parse(value);
          console.log(`3Ô∏è‚É£ Navigation en attente (${key}):`, data.conversationId || data.name);
        }
      }
      
      results.pendingNav = !hasPending;
      if (!hasPending) {
        console.log('3Ô∏è‚É£ Navigations en attente: ‚úÖ Aucune');
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification attente:', error.message);
    }
    
    // 4. Token (bonus)
    try {
      const tokenData = await Notifications.getDevicePushTokenAsync();
      results.token = tokenData?.data;
      console.log(`4Ô∏è‚É£ Token: ${results.token ? '‚úÖ Disponible' : '‚ùå Non disponible'}`);
    } catch (error) {
      console.log('4Ô∏è‚É£ Token: ‚ö†Ô∏è Non r√©cup√©rable (normal sur simulateur)');
    }
    
    console.log('\nüìä R√âSUM√â:');
    console.log(`   Syst√®me: ${Object.values(results).filter(v => v === true).length}/3 ‚úÖ`);
    console.log(`   Pr√™t pour les tests: ${results.permissions && results.navigation ? '‚úÖ OUI' : '‚ùå NON'}`);
    console.log('\n=== FIN DIAGNOSTIC ===\n');
    
    return results;
  }
  
  /**
   * Test de notification locale simple
   */
  static async simulateMessageNotification(conversationId, senderName = "Test User") {
    console.log('\nüì± === TEST NOTIFICATION LOCALE ===');
    console.log('üéØ ConversationId:', conversationId);
    console.log('üë§ Exp√©diteur:', senderName);
    
    try {
      const notificationData = {
        type: 'new_message',
        conversationId: conversationId,
        senderId: 'test-sender-id',
        senderName: senderName,
        messageType: 'text',
        timestamp: new Date().toISOString(),
        navigationTarget: 'Chat',
        navigationScreen: 'ChatTab',
        navigationParams: { conversationId }
      };
      
      const identifier = await Notifications.scheduleNotificationAsync({
        content: {
          title: `Message de ${senderName}`,
          body: "Test de navigation locale",
          data: notificationData,
          sound: true,
        },
        trigger: { 
          seconds: 2,
          repeats: false 
        }
      });
      
      console.log('‚úÖ Notification programm√©e:', identifier);
      console.log('‚è∞ Apparition dans 2 secondes...');
      console.log('üëÜ CLIQUEZ sur la notification pour tester');
      console.log('=== FIN TEST LOCAL ===\n');
      
      return identifier;
    } catch (error) {
      console.error('‚ùå Erreur notification locale:', error);
      return null;
    }
  }
  
  /**
   * Test de notification serveur
   */
  static async testServerNotification(conversationId, testMessage = "Test serveur") {
    console.log('\nüåê === TEST NOTIFICATION SERVEUR ===');
    console.log('üéØ ConversationId:', conversationId);
    console.log('üí¨ Message:', testMessage);
  
    try {
      const axiosInstance = getAxiosInstance();
      if (!axiosInstance) {
        throw new Error('Instance Axios non disponible');
      }
  
      // R√©cup√©rer les donn√©es utilisateur
      const userDataStr = await AsyncStorage.getItem('userData');
      if (!userDataStr) {
        throw new Error('Utilisateur non connect√©');
      }
  
      const userData = JSON.parse(userDataStr);
      console.log('üë§ Exp√©diteur:', userData.name || userData._id);
  
      // Envoyer la notification
      console.log('üì° Envoi au serveur...');
      const response = await axiosInstance.post('/api/notifications/message', {
        conversationId: conversationId,
        senderId: userData._id,
        senderName: userData.name || "Utilisateur Test",
        messagePreview: testMessage,
        messageType: 'text'
      });
  
      console.log('üì® R√©ponse:', response.data.success ? '‚úÖ Succ√®s' : '‚ùå √âchec');
  
      if (response.data.details) {
        const { sent, failed } = response.data.details.results || {};
        if (sent?.length) console.log(`‚úÖ Envoy√© √† ${sent.length} destinataire(s)`);
        if (failed?.length) console.log(`‚ùå √âchec pour ${failed.length} destinataire(s)`);
      }
  
      console.log('üëÜ CLIQUEZ sur la notification pour tester');
      console.log('=== FIN TEST SERVEUR ===\n');
  
      return response.data.success;
    } catch (error) {
      console.error('‚ùå Erreur notification serveur:', error.message);
      if (error.response?.data) {
        console.error('üì° D√©tails:', error.response.data);
      }
      return false;
    }
  }
  
  /**
   * Test de navigation directe (sans notification)
   */
  static testDirectNavigation(conversationId) {
    console.log('\nüöÄ === TEST NAVIGATION DIRECTE ===');
    console.log('üéØ ConversationId:', conversationId);
    
    if (!navigationRef.isReady()) {
      console.log('‚ùå NavigationRef pas pr√™t');
      return false;
    }    try {
        console.log('üß≠ Navigation vers la conversation...');
        navigationRef.navigate('ChatTab', {
          screen: 'Chat',
          params: { conversationId }
        });
  
        console.log('‚úÖ Navigation r√©ussie');
        console.log('=== FIN TEST NAVIGATION ===\n');
        return true;
      } catch (error) {
        console.error('‚ùå Erreur navigation:', error.message);
        return false;
      }
    }
  
    // === M√âTHODES UTILITAIRES ===
  
    /**
     * V√©rifie les permissions de notification
     */
    static async checkNotificationPermissions() {
      try {
        const { status } = await Notifications.getPermissionsAsync();
        const granted = status === 'granted';
  
        if (!granted) {
          console.log('‚ö†Ô∏è Permissions non accord√©es - Demande en cours...');
          const { status: newStatus } = await Notifications.requestPermissionsAsync();
          return newStatus === 'granted';
        }
  
        return granted;
      } catch (error) {
        console.error('‚ùå Erreur v√©rification permissions:', error.message);
        return false;
      }
    }
  
    /**
     * Affiche l'√©tat actuel de navigation
     */
    static debugNavigationState() {
      if (!navigationRef.isReady()) {
        console.log('‚ö†Ô∏è NavigationRef non pr√™t');
        return null;
      }
  
      const state = navigationRef.getState();
      console.log('\nüß≠ === √âTAT NAVIGATION ===');
  
      if (!state) {
        console.log('‚ùå Aucun √©tat disponible');
        return null;
      }
  
      console.log('üìç Route actuelle:', state.routes[state.index].name);
      console.log('üìÑ Pile de navigation:');
  
      state.routes.forEach((route, index) => {
        console.log(`  ${index + 1}. ${route.name}`);
        if (route.params) {
          console.log(`     üîπ Params:`, route.params);
        }
      });
  
      console.log('=== FIN √âTAT NAVIGATION ===\n');
      return state;
    }
  
    /**
     * V√©rifie les navigations en attente
     */
    static async checkPendingNavigations() {
      console.log('\nüîÑ === NAVIGATIONS EN ATTENTE ===');
  
      const keys = ['PENDING_CONVERSATION_NAV', 'EMERGENCY_NAVIGATION', 'PENDING_NAVIGATION'];
      let hasPending = false;
  
      for (const key of keys) {
        const value = await AsyncStorage.getItem(key);
        if (value) {
          hasPending = true;
          const data = JSON.parse(value);
          console.log(`‚ö†Ô∏è ${key}:`, data.conversationId || data.name);
        }
      }
  
      if (!hasPending) {
        console.log('‚úÖ Aucune navigation en attente');
      }
  
      console.log('=== FIN V√âRIFICATION ATTENTE ===\n');
      return hasPending;
    }
  
    /**
     * Nettoie les navigations en attente
     */
    static async clearPendingNavigations() {
      console.log('\nüßπ === NETTOYAGE NAVIGATIONS ===');
  
      const keys = ['PENDING_CONVERSATION_NAV', 'EMERGENCY_NAVIGATION', 'PENDING_NAVIGATION'];
      let clearedCount = 0;
  
      for (const key of keys) {
        const value = await AsyncStorage.getItem(key);
        if (value) {
          await AsyncStorage.removeItem(key);
          clearedCount++;
          console.log(`‚úÖ Nettoy√©: ${key}`);
        }
      }
  
      if (clearedCount === 0) {
        console.log('‚úÖ Rien √† nettoyer');
      }
  
      console.log('=== FIN NETTOYAGE ===\n');
      return clearedCount;
    }
  
    /**
     * Compare la structure des notifications
     */
    static compareNotificationData() {
      console.log('\nüîç === COMPARAISON STRUCTURE NOTIFICATIONS ===');
  
      const localStructure = {
        type: 'new_message',
        conversationId: 'string',
        senderId: 'string',
        senderName: 'string',
        messageType: 'text|image|video',
        timestamp: 'ISOString',
        navigationTarget: 'string',
        navigationScreen: 'string',
        navigationParams: 'object'
      };
  
      const serverStructure = {
        notification: {
          title: 'string',
          body: 'string',
          data: {
            type: 'new_message',
            conversationId: 'string',
            senderId: 'string',
            senderName: 'string',
            messageType: 'text|image|video',
            timestamp: 'ISOString',
            navigationTarget: 'string',
            navigationScreen: 'string',
            navigationParams: 'object'
          }
        },
        recipients: ['array'],
        priority: 'high'
      };
  
      console.log('üìã Structure Locale:');
      console.log(localStructure);
  
      console.log('\nüì° Structure Serveur:');
      console.log(serverStructure);
  
      console.log('\nüîé Points cl√©s √† v√©rifier:');
      console.log('1. Tous les champs requis sont pr√©sents');
      console.log('2. Les types de donn√©es correspondent');
      console.log('3. navigationParams contient conversationId');
      console.log('4. Les timestamps sont au format ISO');
  
      console.log('=== FIN COMPARAISON ===\n');
    }
  
    /**
     * V√©rifie la structure d'une notification serveur r√©elle
     */
    static async verifyServerNotificationStructure(conversationId) {
      console.log('\nüîé === V√âRIFICATION STRUCTURE SERVEUR ===');
      console.log('üéØ ConversationId:', conversationId);
  
      try {
        const axiosInstance = getAxiosInstance();
        if (!axiosInstance) {
          throw new Error('Instance Axios non disponible');
        }
  
        // R√©cup√©rer les donn√©es utilisateur
        const userDataStr = await AsyncStorage.getItem('userData');
        if (!userDataStr) {
          throw new Error('Utilisateur non connect√©');
        }
  
        const userData = JSON.parse(userDataStr);
  
        // Demander une notification de test
        console.log('üì° Demande de notification de test...');
        const response = await axiosInstance.post('/api/notifications/test-structure', {
          conversationId: conversationId,
          senderId: userData._id
        });
  
        if (response.data.notification) {
          console.log('‚úÖ Structure re√ßue:');
          console.log('üìã Type:', response.data.notification.data.type);
          console.log('üîë conversationId:', response.data.notification.data.conversationId);
          console.log('üë§ senderId:', response.data.notification.data.senderId);
          console.log('üìÖ Timestamp:', response.data.notification.data.timestamp);
          console.log('üéØ Navigation:', response.data.notification.data.navigationTarget);
  
          // V√©rifications
          const data = response.data.notification.data;
          const errors = [];
  
          if (data.type !== 'new_message') errors.push('Type incorrect');
          if (!data.conversationId) errors.push('conversationId manquant');
          if (!data.senderId) errors.push('senderId manquant');
          if (!data.timestamp) errors.push('timestamp manquant');
          if (!data.navigationTarget) errors.push('navigationTarget manquant');
          if (!data.navigationParams?.conversationId) errors.push('conversationId dans params manquant');
  
          if (errors.length > 0) {
            console.log('‚ö†Ô∏è Probl√®mes d√©tect√©s:', errors.join(', '));
          } else {
            console.log('‚úÖ Structure valide');
          }
        } else {
          console.log('‚ùå Aucune notification dans la r√©ponse');
        }
  
        console.log('=== FIN V√âRIFICATION ===\n');
        return response.data.success;
      } catch (error) {
        console.error('‚ùå Erreur v√©rification structure:', error.message);
        if (error.response?.data) {
          console.error('üì° D√©tails:', error.response.data);
        }
        return false;
      }
    }
  
    /**
     * R√©cup√®re les conversations r√©elles pour les tests
     */
    static async getRealConversations() {
        console.log('\nüí¨ === CHARGEMENT CONVERSATIONS ===');
      
        try {
          const axiosInstance = getAxiosInstance();
          if (!axiosInstance) {
            throw new Error('Instance Axios non disponible');
          }
      
          const response = await axiosInstance.get('/api/secrets/conversations');
          console.log('R√©ponse de l\'API:', response.data); // Ajoutez ce log pour v√©rifier la structure de la r√©ponse
      
          if (!response.data) {
            throw new Error('La r√©ponse de l\'API ne contient pas de conversations');
          }
      
          // La r√©ponse est un tableau de conversations, pas un objet avec une propri√©t√© `conversations`
          const conversations = Array.isArray(response.data) ? response.data : [response.data];
          console.log(`‚úÖ ${conversations.length} conversations charg√©es`);
      
          if (conversations.length === 0) {
            console.log('‚ö†Ô∏è Aucune conversation disponible');
          }
      
          console.log('=== FIN CHARGEMENT ===\n');
          return conversations;
        } catch (error) {
          console.error('‚ùå Erreur chargement conversations:', error.message);
          return [];
        }
      }
  }
  
  export default NotificationDebugHelper;
  