const User = require('../models/User');
const Secret = require('../models/Secret');
const Conversation = require('../models/Conversation');
const apn = require('node-apn');
const fs = require('fs');
const { i18next, translate } = require('../i18n-config');

const apnsKeyId = process.env.APNS_KEY_ID;
const apnsTeamId = process.env.APPLE_TEAM_ID;
const apnsKey = process.env.APNS_KEY;
// D√©tection de l'environnement via variable d'environnement (par d√©faut: sandbox/d√©veloppement)
const apnsProduction = process.env.APNS_PRODUCTION === 'true';
// Bundle ID de l'application
const bundleId = process.env.APP_BUNDLE_ID || 'com.hushy.app';

// Logs de d√©bogage pour les variables d'environnement
console.log("======== INFORMATIONS DE CONFIGURATION APNS ========");
console.log("APNS_KEY_ID:", apnsKeyId ? "‚úÖ Pr√©sent" : "‚ùå Manquant");
console.log("APPLE_TEAM_ID:", apnsTeamId ? "‚úÖ Pr√©sent" : "‚ùå Manquant");
console.log("APNS_KEY:", apnsKey ? "‚úÖ Pr√©sent" : "‚ùå Manquant");
console.log("Environnement:", apnsProduction ? "üöÄ PRODUCTION" : "üß™ SANDBOX (d√©veloppement)");
console.log("Bundle ID:", bundleId);

// Configuration du provider APNs
let apnProvider = null;

// Initialisation avec JWT uniquement
if (apnsKeyId && apnsTeamId && apnsKey) {
  console.log("Configuration JWT avec cl√© encod√©e en Base64...");
  
  try {
    // D√©coder la cl√© Base64
    const keyBuffer = Buffer.from(apnsKey, 'base64').toString('utf8');
    
    // Configuration du provider avec l'environnement appropri√©
    apnProvider = new apn.Provider({
      token: {
        key: keyBuffer,
        keyId: apnsKeyId,
        teamId: apnsTeamId
      },
      production: apnsProduction,
      // Gateway explicite pour plus de clart√©
      gateway: apnsProduction ? 'api.push.apple.com' : 'api.sandbox.push.apple.com'
    });
    
    console.log(`Provider APNs configur√© avec succ√®s (JWT) pour l'environnement ${apnsProduction ? 'PRODUCTION' : 'SANDBOX'}`);
    
    // Ajouter un √©couteur d'erreurs globales
    apnProvider.on('error', (err) => {
      console.error("Erreur APNs globale:", err);
    });
  } catch (error) {
    console.error("Erreur lors de la configuration JWT:", error.message);
    apnProvider = null;
  }
} else {
  console.error("√âCHEC DE L'INITIALISATION DU PROVIDER APNS: Variables JWT manquantes");
  console.error("Les notifications push ne fonctionneront pas.");
  console.error("Veuillez configurer APNS_KEY_ID, APPLE_TEAM_ID et APNS_KEY");
}

console.log("======== FIN INFORMATIONS DE CONFIGURATION APNS ========");


/**
 * Enregistre un token de notification push pour un utilisateur
 * Accepte √† la fois les tokens APNs et Expo
 * 
 * @param {Object} req - Requ√™te HTTP avec userId et token
 * @param {Object} res - R√©ponse HTTP
 * @returns {Object} Statut de l'op√©ration
 */
const registerToken = async (req, res) => {
  try {
    const { expoPushToken } = req.body;
    const userId = req.user._id;
    
    console.log(`Tentative d'enregistrement du token ${expoPushToken} pour l'utilisateur ${userId}`);
    
    // Valider le token (accepte les tokens APNs et Expo)
    const isValidToken = expoPushToken && 
      (expoPushToken.startsWith('ExponentPushToken[') || // Token Expo
       expoPushToken.match(/^[a-f0-9]{64}$/i) || // Token APNs (hexad√©cimal 64 caract√®res)
       expoPushToken === "SIMULATOR_MOCK_TOKEN"); // Token de simulateur
    
    if (!isValidToken) {
      console.log('Token invalide:', expoPushToken);
      return res.status(400).json({
        success: false,
        message: translate('invalidPushToken', { lng: req.user.language || 'fr' })
      });
    }
    
    // Mettre √† jour le token dans la base de donn√©es
    await User.findByIdAndUpdate(userId, { expoPushToken });
    console.log(`Token enregistr√© avec succ√®s pour l'utilisateur ${userId}`);
    
    res.status(200).json({
      success: true,
      message: translate('tokenRegisteredSuccess', { lng: req.user.language || 'fr' })
    });
  } catch (error) {
    console.error('Erreur lors de l\'enregistrement du token:', error);
    res.status(500).json({
      success: false,
      message: translate('serverError', { lng: req.user?.language || 'fr' })
    });
  }
};

/**
 * Envoie une notification de test pour valider la configuration
 * Compatible avec les tokens APNs et Expo
 * 
 * @param {Object} req - Requ√™te HTTP avec userId et √©ventuellement token sp√©cifique
 * @param {Object} res - R√©ponse HTTP
 * @returns {Object} R√©sultat du test
 */
const sendTestNotification = async (req, res) => {
  console.log('=== D√âBUT DE LA FONCTION sendTestNotification ===');
  
  try {
    const userId = req.user._id;
    const { token } = req.body; // Optionnel: pour tester avec un token sp√©cifique
    const userLanguage = req.user.language || 'fr';
    
    console.log(`[TEST_NOTIF] Utilisateur: ${userId}, Langue: ${userLanguage}`);
    console.log(`[TEST_NOTIF] Token fourni: ${token || 'aucun'}`);
    
    // V√©rification de la configuration APNs
    if (!apnProvider) {
      console.error('[TEST_NOTIF] ERREUR: Le provider APNs n\'est pas initialis√©');
      return res.status(500).json({
        success: false,
        message: translate('apnsProviderNotInitialized', { lng: userLanguage }),
        error: 'PROVIDER_NOT_INITIALIZED'
      });
    }
    
    // Si un token sp√©cifique est fourni, l'utiliser directement
    if (token) {
      console.log(`[TEST_NOTIF] Utilisation du token sp√©cifi√©: ${token}`);
      
      // Traiter le cas du token simulateur
      if (token === "SIMULATOR_MOCK_TOKEN") {
        console.log('[TEST_NOTIF] Token simulateur d√©tect√©, envoi d\'une r√©ponse simul√©e');
        return res.status(200).json({
          success: true,
          message: translate('simulatorTestSuccess', { lng: userLanguage }),
          simulated: true
        });
      }
      
      // Envoyer la notification de test avec le token fourni
      const notificationResult = await sendPushNotifications(
        [userId],
        translate('testNotificationTitle', { lng: userLanguage }),
        {},
        translate('testNotificationBody', { lng: userLanguage }),
        {},
        {
          type: 'test',
          timestamp: new Date().toISOString()
        }
      );
      
      return res.status(200).json({
        success: notificationResult.success,
        message: translate(notificationResult.success ? 'testNotificationSuccess' : 'testNotificationFailure', { lng: userLanguage }),
        details: notificationResult
      });
    }
    
    // Si aucun token n'est fourni, tenter de r√©cup√©rer celui de l'utilisateur
    console.log(`[TEST_NOTIF] Recherche du token de l'utilisateur ${userId}`);
    try {
      const user = await User.findById(userId);
      if (!user || !user.expoPushToken) {
        console.log(`[TEST_NOTIF] Aucun token trouv√© pour l'utilisateur ${userId}`);
        return res.status(404).json({
          success: false,
          message: translate('noPushTokenFound', { lng: userLanguage })
        });
      }
      
      const userToken = user.expoPushToken;
      console.log(`[TEST_NOTIF] Token trouv√© pour l'utilisateur: ${userToken}`);
      
      // Envoyer la notification de test avec le token de l'utilisateur
      const notificationResult = await sendPushNotifications(
        [userId],
        translate('testNotificationTitle', { lng: userLanguage }),
        {},
        translate('testNotificationBody', { lng: userLanguage }),
        {},
        {
          type: 'test',
          timestamp: new Date().toISOString()
        }
      );
      
      return res.status(200).json({
        success: notificationResult.success,
        message: translate(notificationResult.success ? 'testNotificationSuccess' : 'testNotificationFailure', { lng: userLanguage }),
        details: notificationResult
      });
      
    } catch (error) {
      console.error(`[TEST_NOTIF] Erreur lors de la recherche du token de l'utilisateur:`, error);
      return res.status(500).json({
        success: false,
        message: translate('errorFindingUserToken', { lng: userLanguage }),
        error: error.message
      });
    }
  } catch (error) {
    console.error('[TEST_NOTIF] Erreur globale dans la fonction sendTestNotification:', error);
    return res.status(500).json({
      success: false,
      message: translate('serverErrorDuringTest', { lng: req.user?.language || 'fr' }),
      error: error.message
    });
  } finally {
    console.log('=== FIN DE LA FONCTION sendTestNotification ===');
  }
};

/**
 * Fonction pour envoyer des notifications push aux utilisateurs
 * G√®re la traduction des messages selon la langue de chaque utilisateur
 * 
 * @param {Array} userIds - Tableau d'IDs d'utilisateurs √† notifier
 * @param {String} titleKey - Cl√© de traduction pour le titre ou texte direct
 * @param {Object} titleData - Donn√©es pour la traduction du titre (variables)
 * @param {String} bodyKey - Cl√© de traduction pour le corps ou texte direct
 * @param {Object} bodyData - Donn√©es pour la traduction du corps (variables)
 * @param {Object} extraData - Donn√©es suppl√©mentaires √† inclure dans la notification
 * @returns {Object} R√©sultat de l'op√©ration avec succ√®s et d√©tails
 */
const sendPushNotifications = async (userIds, titleKey, titleData = {}, bodyKey, bodyData = {}, extraData = {}) => {
  try {
    console.log('D√©but de sendPushNotifications avec userIds:', userIds);
    console.log('TitleKey:', titleKey, 'TitleData:', titleData);
    console.log('BodyKey:', bodyKey, 'BodyData:', bodyData);
    
    // V√©rifier la configuration du provider APNs
    if (!apnProvider) {
      console.log('Provider APNs non configur√©, impossible d\'envoyer des notifications');
      return { success: false, message: 'Provider APNs non configur√©' };
    }
    
    // R√©cup√©rer les utilisateurs avec leur langue pr√©f√©r√©e
    const users = await User.find({ _id: { $in: userIds } });
    console.log(`Nombre d'utilisateurs trouv√©s: ${users.length}`);
    
    // Pr√©paration des r√©sultats
    const results = { sent: [], failed: [] };
    
    // Traiter chaque utilisateur
    for (const user of users) {
      console.log(`Traitement de l'utilisateur ${user._id}, token: ${user.expoPushToken || 'non d√©fini'}, langue: ${user.language || 'fr'}`);
      
      // V√©rifier que l'utilisateur a un token
      if (!user.expoPushToken) {
        console.log(`Pas de token pour l'utilisateur ${user._id}, on passe au suivant`);
        results.failed.push({
          userId: user._id,
          reason: 'Token manquant'
        });
        continue;
      }
      
      // V√©rifier le type de token
      const isExpoToken = user.expoPushToken.startsWith('ExponentPushToken[');
      console.log(`Token type: ${isExpoToken ? 'Expo' : 'APNs'}`);
      
      // Les tokens Expo ne sont pas pris en charge directement
      if (isExpoToken) {
        console.log(`Token Expo d√©tect√© pour l'utilisateur ${user._id}, non support√© sans EAS`);
        results.failed.push({
          userId: user._id,
          reason: 'Token Expo d√©tect√©, EAS requis'
        });
        continue;
      }
      
      // D√©terminer la langue de l'utilisateur (fran√ßais par d√©faut)
      const userLanguage = user.language || 'fr';
      console.log(`Langue de l'utilisateur: ${userLanguage}`);
      
      // Traduction du titre et du corps selon la langue
      let title, body;
      
      // Traduire le titre
      if (typeof titleKey === 'string') {
        // Si c'est une cl√© standard de traduction
        title = translate(titleKey, { lng: userLanguage, ...titleData });
      } else {
        // Si c'est un texte direct ou un autre type
        title = titleKey;
      }
      
      // Traduire le corps
      if (typeof bodyKey === 'string') {
        // Si c'est une cl√© de traduction avec pr√©fixe KEY_
        if (bodyKey.startsWith('KEY_')) {
          body = translate(bodyKey.substring(4), { lng: userLanguage, ...bodyData });
        } else {
          // Si c'est une cl√© standard ou un texte direct
          body = translate(bodyKey, { lng: userLanguage, ...bodyData });
        }
      } else {
        // Si c'est un autre type
        body = bodyKey;
      }
      
      console.log(`Notification traduite: Titre="${title}" Corps="${body}"`);
      
      try {
        // Cr√©er la notification APNs
        const notification = new apn.Notification();
        notification.expiry = Math.floor(Date.now() / 1000) + 3600; // Expire dans 1h
        notification.badge = 1;
        notification.sound = 'default';
        notification.alert = {
          title: title,
          body: body,
        };
        notification.payload = {
          ...extraData,
          timestamp: new Date().toISOString()
        };
        notification.topic = bundleId; // Utiliser la variable globale bundleId
        
        console.log('Notification pr√©par√©e:', JSON.stringify({
          expiry: notification.expiry,
          badge: notification.badge,
          sound: notification.sound,
          alert: notification.alert,
          topic: notification.topic
        }));
        
        // Envoyer la notification
        console.log(`Envoi de la notification √† ${user.expoPushToken}`);
        const response = await apnProvider.send(notification, user.expoPushToken);
        console.log('R√©ponse compl√®te APNs:', JSON.stringify(response, null, 2));
        
        // V√©rifier le r√©sultat
        if (response.failed && response.failed.length > 0) {
          console.log('√âchec de l\'envoi:', JSON.stringify(response.failed[0], null, 2));
          results.failed.push({
            userId: user._id,
            token: user.expoPushToken,
            reason: response.failed[0].response || response.failed[0].error || 'Raison inconnue'
          });
        } else if (response.sent && response.sent.length > 0) {
          console.log('Notification envoy√©e avec succ√®s');
          results.sent.push({
            userId: user._id,
            token: user.expoPushToken
          });
        } else {
          console.log('R√©sultat ind√©termin√©:', JSON.stringify(response, null, 2));
          results.failed.push({
            userId: user._id,
            token: user.expoPushToken,
            reason: 'R√©sultat ind√©termin√©'
          });
        }
      } catch (error) {
        console.error('Erreur lors de l\'envoi de la notification:', error);
        results.failed.push({
          userId: user._id,
          token: user.expoPushToken,
          reason: error.message
        });
      }
    }
    
    console.log('R√©sultats finaux:', JSON.stringify(results, null, 2));
    return { 
      success: results.sent.length > 0, 
      results 
    };
  } catch (error) {
    console.error('Erreur globale lors de l\'envoi des notifications:', error);
    return { success: false, error: error.message };
  }
};

// Notification de nouveau message avec support multilingue
const sendMessageNotification = async (req, res) => {
  try {
    const { conversationId, senderId, senderName, messagePreview, messageType = 'text' } = req.body;
    
    // V√©rifier les param√®tres requis
    if (!conversationId || !senderId) {
      return res.status(400).json({
        success: false,
        message: 'Param√®tres manquants'
      });
    }
    
    // R√©cup√©rer les participants de la conversation avec leur langue
    const conversation = await Conversation.findById(conversationId)
      .populate('participants', '_id name language');
    
    if (!conversation) {
      return res.status(404).json({
        success: false,
        message: 'Conversation non trouv√©e'
      });
    }
    
    // Filtrer les participants pour exclure l'exp√©diteur
    const recipients = conversation.participants
      .filter(p => p._id.toString() !== senderId);
    
    if (recipients.length === 0) {
      return res.status(200).json({
        success: true,
        message: 'Aucun destinataire √† notifier'
      });
    }
    
    // Tronquer le message s'il est trop long
    const truncatedMessage = messagePreview && messagePreview.length > 100 
      ? messagePreview.substring(0, 97) + '...' 
      : messagePreview || '';
    
    // D√©terminer le corps du message selon le type
    let bodyKey;
    let bodyData = {};
    
    switch (messageType) {
      case 'audio':
        bodyKey = 'KEY_audioMessage';
        break;
      case 'image':
        bodyKey = 'KEY_imageMessage';
        break;
      case 'mixed':
        bodyKey = 'KEY_mixedMessage';
        break;
      default:
        // Pour les messages texte, on utilise directement le contenu
        bodyKey = truncatedMessage;
    }
    
    // R√©cup√©rer les IDs des destinataires
    const recipientIds = recipients.map(p => p._id.toString());
    
    // Envoyer la notification aux autres participants
    const notificationResult = await sendPushNotifications(
      recipientIds,
      'messageFrom',         // Cl√© pour le titre
      { senderName },        // Donn√©es pour le titre
      bodyKey,               // Cl√© ou texte pour le corps
      bodyData,              // Donn√©es pour le corps
      {                      // Donn√©es suppl√©mentaires
        type: 'new_message',
        conversationId,
        senderId,
        messageType,
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification de message envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification de message:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Notification d'achat de secret avec support multilingue
const sendPurchaseNotification = async (req, res) => {
  try {
    const { secretId, buyerId, buyerName, price, currency } = req.body;
    
    // V√©rifier les param√®tres requis
    if (!secretId || !buyerId) {
      return res.status(400).json({
        success: false,
        message: 'Param√®tres manquants'
      });
    }
    
    // R√©cup√©rer les informations du secret et la langue du vendeur
    const secret = await Secret.findById(secretId).populate('user', '_id name language');
    
    if (!secret) {
      return res.status(404).json({
        success: false,
        message: 'Secret non trouv√©'
      });
    }
    
    // Ne pas notifier si l'acheteur est aussi le vendeur
    if (buyerId === secret.user._id.toString()) {
      return res.status(200).json({
        success: true,
        message: 'Pas de notification, acheteur = vendeur'
      });
    }
    
    // Formater le prix
    const formattedPrice = `${price} ${currency}`;
    
    // Envoyer la notification au vendeur seulement
    const notificationResult = await sendPushNotifications(
      [secret.user._id.toString()],
      'secretSold',           // Cl√© pour le titre
      {},                     // Pas de param√®tres pour le titre
      'KEY_secretPurchased',  // Cl√© pour le corps
      {                       // Donn√©es pour le corps
        buyerName,
        price: formattedPrice
      },
      {                       // Donn√©es suppl√©mentaires
        type: 'purchase',
        secretId,
        buyerId,
        price,
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification d\'achat envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification d\'achat:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Notification de secrets √† proximit√© avec support multilingue
const sendNearbyNotification = async (req, res) => {
  try {
    const { userId, count, distance } = req.body;
    
    // V√©rifier les param√®tres requis
    if (!userId || !count || !distance) {
      return res.status(400).json({
        success: false,
        message: 'Param√®tres manquants'
      });
    }
    
    // Envoyer la notification
    const notificationResult = await sendPushNotifications(
      [userId],
      'nearbySecrets',        // Cl√© pour le titre
      {},                     // Pas de param√®tres pour le titre
      'KEY_nearbySecrets',    // Cl√© pour le corps
      {                       // Donn√©es pour le corps
        count,
        distance
      },
      {                       // Donn√©es suppl√©mentaires
        type: 'nearby_secrets',
        count,
        distance,
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification de proximit√© envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification de proximit√©:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Notification de rappel Stripe avec support multilingue
const sendStripeReminderNotification = async (req, res) => {
  try {
    const { userId } = req.body;
    
    // V√©rifier le param√®tre requis
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'ID utilisateur manquant'
      });
    }
    
    // Envoyer la notification
    const notificationResult = await sendPushNotifications(
      [userId],
      'stripeReminder',           // Cl√© pour le titre
      {},                         // Pas de param√®tres pour le titre
      'KEY_stripeReminder',       // Cl√© pour le corps
      {},                         // Pas de param√®tres pour le corps
      {                           // Donn√©es suppl√©mentaires
        type: 'stripe_setup_reminder',
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification de rappel Stripe envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification de rappel Stripe:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Notification d'√©v√©nement avec support multilingue
const sendEventNotification = async (req, res) => {
  try {
    const { userId, eventName, daysLeft } = req.body;
    
    // V√©rifier les param√®tres requis
    if (!userId || !eventName) {
      return res.status(400).json({
        success: false,
        message: 'Param√®tres manquants'
      });
    }
    
    // Envoyer la notification
    const notificationResult = await sendPushNotifications(
      [userId],
      'eventNotification',        // Cl√© pour le titre
      {},                         // Pas de param√®tres pour le titre
      'KEY_eventNotification',    // Cl√© pour le corps
      {                           // Donn√©es pour le corps
        eventName,
        daysLeft
      },
      {                           // Donn√©es suppl√©mentaires
        type: 'time_limited_event',
        eventName,
        daysLeft,
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification d\'√©v√©nement envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification d\'√©v√©nement:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Notification de statistiques avec support multilingue
const sendStatsNotification = async (req, res) => {
  try {
    const { userId, secretsCount, purchasesCount } = req.body;
    
    // V√©rifier les param√®tres requis
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'ID utilisateur manquant'
      });
    }
    
    // Envoyer la notification
    const notificationResult = await sendPushNotifications(
      [userId],
      'statsUpdate',              // Cl√© pour le titre
      {},                         // Pas de param√®tres pour le titre
      'KEY_statsUpdate',          // Cl√© pour le corps
      {                           // Donn√©es pour le corps
        secretsCount,
        purchasesCount
      },
      {                           // Donn√©es suppl√©mentaires
        type: 'stats_update',
        secretsCount,
        purchasesCount,
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification de statistiques envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification de statistiques:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Notification de bienvenue avec support multilingue
const sendWelcomeBackNotification = async (req, res) => {
  try {
    const { userId, daysAbsent } = req.body;
    
    // V√©rifier les param√®tres requis
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'ID utilisateur manquant'
      });
    }
    
    // Envoyer la notification
    const notificationResult = await sendPushNotifications(
      [userId],
      'welcomeBack',              // Cl√© pour le titre
      {},                         // Pas de param√®tres pour le titre
      'KEY_welcomeBack',          // Cl√© pour le corps
      {                           // Donn√©es pour le corps
        daysAbsent
      },
      {                           // Donn√©es suppl√©mentaires
        type: 'welcome_back',
        daysAbsent,
        timestamp: new Date().toISOString()
      }
    );
    
    res.status(200).json({
      success: true,
      message: 'Notification de bienvenue envoy√©e',
      details: notificationResult
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification de bienvenue:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur'
    });
  }
};

// Export du contr√¥leur
module.exports = {
  registerToken,
  sendTestNotification,
  sendMessageNotification,
  sendPurchaseNotification,
  sendNearbyNotification,
  sendStripeReminderNotification,
  sendEventNotification,
  sendStatsNotification, 
  sendWelcomeBackNotification
};