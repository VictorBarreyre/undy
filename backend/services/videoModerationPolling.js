// services/videoModerationPolling.js - Alternative aux webhooks

const { checkVideoAnalysisStatus, analyzeVideoResult } = require('../controllers/moderationController');
const cloudinary = require('../config/cloudinary');
const VideoModeration = require('../models/VideoModeration'); // √Ä cr√©er

/**
 * Service de polling pour v√©rifier le statut des vid√©os en mod√©ration
 * √Ä ex√©cuter toutes les X minutes via un cron job
 */
class VideoModerationPollingService {
  constructor() {
    this.isRunning = false;
    this.pollingInterval = null;
  }

  /**
   * D√©marrer le polling
   * @param {number} intervalMinutes - Intervalle en minutes (par d√©faut 5)
   */
  start(intervalMinutes = 5) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Le service de polling est d√©j√† en cours d\'ex√©cution');
      return;
    }

    console.log(`üöÄ D√©marrage du service de polling (intervalle: ${intervalMinutes} minutes)`);
    this.isRunning = true;

    // Ex√©cuter imm√©diatement
    this.checkPendingVideos();

    // Puis toutes les X minutes
    this.pollingInterval = setInterval(() => {
      this.checkPendingVideos();
    }, intervalMinutes * 60 * 1000);
  }

  /**
   * Arr√™ter le polling
   */
  stop() {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
      this.isRunning = false;
      console.log('üõë Service de polling arr√™t√©');
    }
  }

  /**
   * V√©rifier toutes les vid√©os en attente de mod√©ration
   */
  async checkPendingVideos() {
    try {
      console.log('üîç V√©rification des vid√©os en attente de mod√©ration...');

      // R√©cup√©rer toutes les vid√©os avec statut "pending"
      const pendingVideos = await VideoModeration.find({ 
        status: 'pending',
        workflowId: { $exists: true }
      });

      console.log(`üìä ${pendingVideos.length} vid√©os en attente`);

      // V√©rifier chaque vid√©o
      for (const video of pendingVideos) {
        await this.checkVideoStatus(video);
        
        // Attendre un peu entre chaque v√©rification pour ne pas surcharger l'API
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des vid√©os:', error);
    }
  }

  /**
   * V√©rifier le statut d'une vid√©o sp√©cifique
   * @param {Object} videoRecord - Enregistrement de la vid√©o dans la DB
   */
  async checkVideoStatus(videoRecord) {
    try {
      console.log(`üé• V√©rification de la vid√©o ${videoRecord.publicId} (workflow: ${videoRecord.workflowId})`);

      // Appeler l'API Sightengine pour v√©rifier le statut
      const statusData = await checkVideoAnalysisStatus(videoRecord.workflowId);

      // Si l'analyse n'est pas termin√©e, on continue
      if (statusData.status !== 'finished') {
        console.log(`‚è≥ Analyse en cours (${statusData.progress || 0}%)`);
        return;
      }

      // Analyser les r√©sultats
      const analysisResult = analyzeVideoResult(statusData);
      
      console.log(`üìä Analyse termin√©e:`, {
        workflowId: videoRecord.workflowId,
        isFlagged: analysisResult.isFlagged,
        reason: analysisResult.reason
      });

      if (analysisResult.isFlagged) {
        // Vid√©o inappropri√©e
        await this.handleRejectedVideo(videoRecord, analysisResult);
      } else {
        // Vid√©o approuv√©e
        await this.handleApprovedVideo(videoRecord);
      }

      // Mettre √† jour le statut dans la base de donn√©es
      await VideoModeration.updateOne(
        { _id: videoRecord._id },
        {
          status: analysisResult.isFlagged ? 'rejected' : 'approved',
          reason: analysisResult.reason,
          moderatedAt: new Date(),
          moderationDetails: analysisResult.details
        }
      );

    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification de la vid√©o ${videoRecord.publicId}:`, error);
      
      // Si c'est une erreur 404, le workflow n'existe peut-√™tre plus
      if (error.response?.status === 404) {
        await VideoModeration.updateOne(
          { _id: videoRecord._id },
          { 
            status: 'error',
            error: 'Workflow introuvable',
            moderatedAt: new Date()
          }
        );
      }
    }
  }

  /**
   * G√©rer une vid√©o rejet√©e
   * @param {Object} videoRecord - Enregistrement de la vid√©o
   * @param {Object} analysisResult - R√©sultat de l'analyse
   */
  async handleRejectedVideo(videoRecord, analysisResult) {
    console.log(`‚ùå Vid√©o rejet√©e: ${videoRecord.publicId} - Raison: ${analysisResult.reason}`);

    try {
      // 1. Supprimer la vid√©o de Cloudinary
      await cloudinary.uploader.destroy(videoRecord.publicId, { 
        resource_type: 'video' 
      });
      console.log('‚úÖ Vid√©o supprim√©e de Cloudinary');

      // 2. Supprimer le message associ√© (si applicable)
      if (videoRecord.messageId) {
        const Message = require('../models/Message'); // √Ä adapter selon votre mod√®le
        await Message.deleteOne({ _id: videoRecord.messageId });
        console.log('‚úÖ Message associ√© supprim√©');
      }

      // 3. Notifier l'utilisateur (exemple)
      if (videoRecord.userId) {
        // await notifyUser(videoRecord.userId, 'video_rejected', {
        //   reason: analysisResult.reason,
        //   videoTitle: videoRecord.title
        // });
        console.log('üìß Notification envoy√©e √† l\'utilisateur');
      }

    } catch (error) {
      console.error('Erreur lors du traitement de la vid√©o rejet√©e:', error);
    }
  }

  /**
   * G√©rer une vid√©o approuv√©e
   * @param {Object} videoRecord - Enregistrement de la vid√©o
   */
  async handleApprovedVideo(videoRecord) {
    console.log(`‚úÖ Vid√©o approuv√©e: ${videoRecord.publicId}`);

    try {
      // Mettre √† jour les tags Cloudinary
      await cloudinary.uploader.replace_tag('sightengine_approved', [videoRecord.publicId]);
      await cloudinary.uploader.remove_tag('pending_moderation', [videoRecord.publicId]);
      console.log('‚úÖ Tags Cloudinary mis √† jour');

      // Notifier l'utilisateur si n√©cessaire
      if (videoRecord.userId) {
        // await notifyUser(videoRecord.userId, 'video_approved', {
        //   videoTitle: videoRecord.title
        // });
      }

    } catch (error) {
      console.error('Erreur lors du traitement de la vid√©o approuv√©e:', error);
    }
  }

  /**
   * Obtenir les statistiques du service
   */
  async getStats() {
    const stats = await VideoModeration.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    return {
      isRunning: this.isRunning,
      stats: stats.reduce((acc, curr) => {
        acc[curr._id] = curr.count;
        return acc;
      }, {}),
      total: stats.reduce((sum, curr) => sum + curr.count, 0)
    };
  }
}

// Cr√©er une instance unique
const videoModerationPolling = new VideoModerationPollingService();

module.exports = videoModerationPolling;