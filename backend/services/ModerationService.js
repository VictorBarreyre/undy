// services/ModerationService.js (Backend) - TOUTE MOD√âRATION M√âDIA D√âSACTIV√âE

const axios = require('axios');

console.log('üö´ Backend ModerationService: TOUTE MOD√âRATION M√âDIA D√âSACTIV√âE');

// Configuration - SEULE LA MOD√âRATION TEXTE EST CONSERV√âE
const MODERATION_CONFIG = {
  // TOUTE MOD√âRATION M√âDIA D√âSACTIV√âE
  enableImageModeration: false,
  enableVideoModeration: false,
  enableAudioModeration: false,
  enableMediaModeration: false,
  
  // SEULE LA MOD√âRATION TEXTE EST ACTIVE
  enableTextModeration: true,
  
  // Message de statut
  message: 'Toute mod√©ration m√©dia d√©sactiv√©e - seul le texte est v√©rifi√© localement'
};

// Liste de mots √† filtrer localement (SEULE MOD√âRATION ACTIVE)
const OFFENSIVE_WORDS = [
  // Insultes et mots vulgaires en fran√ßais
  "putain", "merde", "connard", "salope", "encul√©", "p√©d√©",
  // Termes haineux ou discriminatoires
  "n√®gre", "youpin", "bougnoule", "pute", "tapette",
  // Insultes en anglais
  "fuck", "shit", "asshole", "bitch", "cunt", "faggot", "nigger",
];

/**
 * V√©rifier localement si le contenu contient des mots offensants (SEULE MOD√âRATION ACTIVE)
 * @param {string} content - Texte √† v√©rifier
 * @returns {Object} R√©sultat de la v√©rification
 */
const checkContentLocally = (content) => {
  if (!content || typeof content !== 'string') {
    return { isFlagged: false, reason: null };
  }

  const lowerContent = content.toLowerCase();
  
  // Recherche des mots offensants
  const foundWords = OFFENSIVE_WORDS.filter(word => 
    lowerContent.includes(word.toLowerCase())
  );

  if (foundWords.length > 0) {
    const result = {
      isFlagged: true,
      reason: 'offensive_language',
      details: {
        flaggedWords: foundWords,
      }
    };
    
    console.log('Violation de mod√©ration d√©tect√©e localement:', result);
    return result;
  }

  return { isFlagged: false, reason: null };
};

/**
 * MOD√âRATION D'IMAGE COMPL√àTEMENT D√âSACTIV√âE
 * @param {string|Object} imageData - Donn√©es de l'image (ignor√©)
 * @returns {Promise<Object>} - Toujours autoris√©
 */
const moderateImage = async (imageData) => {
  console.log('üñºÔ∏è Backend: Mod√©ration d\'image COMPL√àTEMENT D√âSACTIV√âE - autorisation automatique');
  
  return {
    isFlagged: false,
    reason: null,
    disabled: true,
    service: 'backend-moderation',
    message: 'Mod√©ration d\'image compl√®tement d√©sactiv√©e c√¥t√© serveur'
  };
};

/**
 * SOUMISSION DE VID√âO COMPL√àTEMENT D√âSACTIV√âE
 * @param {string} videoData - URL ou fichier de la vid√©o (ignor√©)
 * @param {string} messageId - ID du message (ignor√©)
 * @returns {Promise<Object>} - Toujours autoris√©
 */
const submitVideoForModeration = async (videoData, messageId) => {
  console.log('üé• Backend: Soumission de vid√©o COMPL√àTEMENT D√âSACTIV√âE - autorisation automatique');
  
  return {
    isFlagged: false,
    reason: null,
    status: 'disabled',
    disabled: true,
    service: 'backend-moderation',
    message: 'Mod√©ration de vid√©o compl√®tement d√©sactiv√©e c√¥t√© serveur'
  };
};

/**
 * V√âRIFICATION DE STATUT VID√âO COMPL√àTEMENT D√âSACTIV√âE
 * @param {string} workflowId - ID du workflow (ignor√©)
 * @returns {Promise<Object>} - Toujours autoris√©
 */
const checkVideoModerationStatus = async (workflowId) => {
  console.log('üé• Backend: V√©rification de statut vid√©o COMPL√àTEMENT D√âSACTIV√âE - autorisation automatique');
  
  return {
    isFlagged: false,
    reason: null,
    status: 'disabled',
    disabled: true,
    service: 'backend-moderation',
    message: 'V√©rification de statut vid√©o compl√®tement d√©sactiv√©e c√¥t√© serveur'
  };
};

/**
 * MOD√âRATION D'AUDIO COMPL√àTEMENT D√âSACTIV√âE
 * @param {string} audioData - Donn√©es audio (ignor√©)
 * @returns {Promise<Object>} - Toujours autoris√©
 */
const moderateAudio = async (audioData) => {
  console.log('üéµ Backend: Mod√©ration d\'audio COMPL√àTEMENT D√âSACTIV√âE - autorisation automatique');
  
  return {
    isFlagged: false,
    reason: null,
    disabled: true,
    service: 'backend-moderation',
    message: 'Mod√©ration d\'audio compl√®tement d√©sactiv√©e c√¥t√© serveur'
  };
};

/**
 * Point d'entr√©e principal pour la mod√©ration de contenu texte (SEULE ACTIVE)
 * @param {string} content - Contenu texte √† mod√©rer
 * @returns {Promise<Object>} - R√©sultat de mod√©ration
 */
const moderateContent = async (content) => {
  if (!MODERATION_CONFIG.enableTextModeration) {
    return { isFlagged: false, reason: null, disabled: true };
  }
  
  // Seule la v√©rification locale est active
  return checkContentLocally(content);
};

/**
 * Mod√©rer un message complet - SEUL LE TEXTE EST V√âRIFI√â
 * @param {Object} message - Message √† mod√©rer
 * @returns {Promise<Object>} - R√©sultat global de mod√©ration
 */
const moderateMessage = async (message) => {
  try {
    const results = {
      isFlagged: false,
      reason: null,
      details: {},
      status: 'completed'
    };
    
    // 1. SEULE V√âRIFICATION ACTIVE : LE TEXTE
    if (message.content && MODERATION_CONFIG.enableTextModeration) {
      const textResult = await moderateContent(message.content);
      results.details.text = textResult;
      
      // Si le texte est flagg√©, on retourne imm√©diatement
      if (textResult.isFlagged) {
        return {
          ...textResult,
          contentType: 'text'
        };
      }
    }
    
    // 2. TOUTES LES AUTRES V√âRIFICATIONS COMPL√àTEMENT IGNOR√âES
    if (message.image) {
      console.log('üñºÔ∏è Backend: Image dans le message - COMPL√àTEMENT IGNOR√âE');
      results.details.image = {
        isFlagged: false,
        reason: null,
        disabled: true,
        message: 'Mod√©ration d\'image compl√®tement d√©sactiv√©e'
      };
    }
    
    if (message.video) {
      console.log('üé• Backend: Vid√©o dans le message - COMPL√àTEMENT IGNOR√âE');
      results.details.video = {
        isFlagged: false,
        reason: null,
        status: 'disabled',
        disabled: true,
        message: 'Mod√©ration de vid√©o compl√®tement d√©sactiv√©e'
      };
    }
    
    if (message.audio) {
      console.log('üéµ Backend: Audio dans le message - COMPL√àTEMENT IGNOR√â');
      results.details.audio = {
        isFlagged: false,
        reason: null,
        disabled: true,
        message: 'Mod√©ration d\'audio compl√®tement d√©sactiv√©e'
      };
    }
    
    return results;
    
  } catch (error) {
    console.error("Erreur lors de la mod√©ration du contenu:", error);
    // En cas d'erreur, permettre l'envoi par d√©faut
    return { isFlagged: false };
  }
};

/**
 * Convertir un code de raison en message utilisateur (SEUL LE TEXTE)
 * @param {string} reason - Code de raison de mod√©ration
 * @returns {string} - Message utilisateur
 */
const getViolationMessage = (reason) => {
  const messages = {
    'offensive_language': "Ce message contient un langage offensant.",
    'hate': "Ce message contient un discours haineux.",
    'harassment': "Ce message contient du contenu consid√©r√© comme du harc√®lement.",
    'default': "Ce message a √©t√© bloqu√© car il enfreint nos directives communautaires."
  };
  
  return messages[reason] || messages.default;
};

/**
 * Obtenir le statut de la mod√©ration
 * @returns {Object} - Statut actuel de la mod√©ration
 */
const getModerationStatus = () => {
  return {
    ...MODERATION_CONFIG,
    activeModerations: ['text'],
    disabledModerations: ['image', 'video', 'audio'],
    message: 'Seule la mod√©ration de texte local est active'
  };
};

module.exports = {
  moderateContent,        // SEULE FONCTION ACTIVE
  moderateImage,          // D√âSACTIV√âE - retourne toujours autoris√©
  submitVideoForModeration, // D√âSACTIV√âE - retourne toujours autoris√©
  checkVideoModerationStatus, // D√âSACTIV√âE - retourne toujours autoris√©
  moderateAudio,          // D√âSACTIV√âE - retourne toujours autoris√©
  moderateMessage,        // ACTIVE mais ignore tout sauf le texte
  getViolationMessage,    // ACTIVE pour le texte uniquement
  getModerationStatus,    // Informations sur l'√©tat du service
  
  // M√©tadonn√©es du service
  serviceConfig: MODERATION_CONFIG
};

/* 
===================================================================
TOUT LE CODE SIGHTENGINE ET MOD√âRATION M√âDIA A √âT√â SUPPRIM√â
===================================================================

Ce service backend ne fait plus AUCUN appel √† :
- Sightengine API
- Mod√©ration d'images
- Mod√©ration de vid√©os  
- Mod√©ration d'audio
- APIs externes de mod√©ration m√©dia

SEULE la mod√©ration de texte locale (mots offensants) est conserv√©e.

===================================================================
*/